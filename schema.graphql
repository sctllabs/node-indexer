# noinspection GraphQLUnresolvedReference,GraphQLDuplicateDirective,GraphQLMissingType

# start Account
type Account @entity {
  "Account address"
  id: ID!
}
# end Account

# start Dao
type Dao @entity {
  id: ID!
  account: Account!
  founder: Account!
  council: [String!]!
  technicalCommittee: [String!]!
  name: String!
  purpose: String!
  metadata: String!
  fungibleToken: FungibleToken
  ethTokenAddress: String
  policy: Policy!
  proposals: [CouncilProposal]! @derivedFrom(field: "dao")
  createdAt: DateTime!
  blockHash: String!
  blockNum: Int!
}

enum ApproveOriginType {
  AtLeast
  MoreThan
}

enum GovernanceKind {
  GovernanceV1
  OwnershipWeightedVoting
}

type GovernanceV1 {
  kind: GovernanceKind!
  enactmentPeriod: BigInt!
  launchPeriod: BigInt!
  votingPeriod: BigInt!
  voteLockingPeriod: BigInt!
  fastTrackVotingPeriod: BigInt!
  cooloffPeriod: BigInt!
  minimumDeposit: BigInt!
  externalOrigin: ApproveOriginType!
  externalMajorityOrigin: ApproveOriginType!
  externalDefaultOrigin: ApproveOriginType!
  fastTrackOrigin: ApproveOriginType!
  instantOrigin: ApproveOriginType!
  instantAllowed: Boolean!
  cancellationOrigin: ApproveOriginType!
  blacklistOrigin: ApproveOriginType!
  cancelProposalOrigin: ApproveOriginType!
}

type OwnershipWeightedVoting {
  kind: GovernanceKind!
}

union Governance = GovernanceV1 | OwnershipWeightedVoting

type Policy @entity {
  id: ID!
  proposalPeriod: Int!
  approveOriginType: ApproveOriginType!
  approveOriginProportion: [Int!]!
  governance: Governance
}
# end Dao

# start Token
type FungibleToken @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int
  isFrozen: Boolean!
  createdAt: DateTime!
  blockHash: String!
  blockNum: Int!
}
# end Token

# start Proposal types
type AddMember {
  who: String!
}

type RemoveMember {
  who: String!
}

type Spend {
  amount: BigInt!
  beneficiary: String!
}

type TransferToken {
  amount: BigInt!
  beneficiary: String!
}
# end Proposal types

# start CouncilProposal
union CouncilProposalKind = AddMember | RemoveMember | Spend | TransferToken

enum CouncilProposalStatus {
  Open
  Approved
  Disapproved
  Executed
  Closed
}

type CouncilProposal @entity {
  id: ID!
  index: String!
  hash: String!
  account: Account!
  dao: Dao!
  voteThreshold: Int!
  kind: CouncilProposalKind!
  meta: String
  createdAt: DateTime!
  blockHash: String!
  blockNum: Int!
  status: CouncilProposalStatus!
}

type CouncilVoteHistory @entity {
  id: ID!
  proposal: CouncilProposal
  approvedVote: Boolean!
  councillor: Account
  votedYes: Int
  votedNo: Int
  createdAt: DateTime!
  blockHash: String!
  blockNum: Int!
}
# end CouncilProposal

# start DemocracyProposal
union DemocracyProposalKind = AddMember | RemoveMember | Spend | TransferToken

enum DemocracyProposalStatus {
  Open
  Referendum
}

type DemocracyProposal @entity {
  id: ID!
  index: String!
  account: Account!
  dao: Dao!
  deposit: BigInt!
  kind: DemocracyProposalKind!
  meta: String
  createdAt: DateTime!
  blockHash: String!
  blockNum: Int!
  status: DemocracyProposalStatus!
}

type DemocracySecond @entity {
  id: ID!
  seconder: Account!
  count: Int!
  proposal: DemocracyProposal!
}
# end DemocracyProposal

# start DemocracyReferendum
enum DemocracyReferendumStatus {
  Started
  Passed
  NotPassed
  Cancelled
}

enum DemocracyReferendumVoteThreshold {
  SuperMajorityApprove
  SuperMajorityAgainst
  SimpleMajority
}

type DemocracyReferendum @entity {
  id: ID!
  voteThreshold: DemocracyReferendumVoteThreshold!
  democracyProposal: DemocracyProposal!
  status: DemocracyReferendumStatus!
}
# end DemocracyReferendum

# start DemocracyDelegation
enum Conviction {
  Locked1x
  Locked2x
  Locked3x
  Locked4x
  Locked5x
  Locked6x
}

type DemocracyDelegation @entity {
  id: ID!
  queryId: String! @index
  account: Account!
  target: Account!
  lockedBalance: BigInt!
  conviction: Conviction
}
# end DemocracyDelegation
